<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_wall</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fixed rotation
phy_fixed_rotation = true;
spr = spr_surface;
spritesInImage = 14;
sprIndex = irandom(spritesInImage - 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///finds orb and draws tile in direction of orb
//draw_self()
if (instance_exists(obj_dirOrb)){
    var nOrb = instance_nearest(x, y, obj_dirOrb);
    
    var right = point_distance(x + (sprite_width / 2), y, nOrb.x, nOrb.y);
    var left = point_distance(x - (sprite_width / 2), y, nOrb.x, nOrb.y);
    var top = point_distance(x, y + (sprite_height / 2), nOrb.x, nOrb.y);
    var bot = point_distance(x, y - (sprite_height / 2), nOrb.x, nOrb.y);
    
    var closestSide = max(right, left, top, bot);
    //show_debug_message(closestSide);
    //show_debug_message("right - " + string(right) + "left - " + string(left) + "top - " + string(top) + "bot - " + string(bot))
    
    
    
    
    switch (closestSide){
        case right:
            //show_debug_message("drawing right");
            draw_sprite_ext(spr, sprIndex, x - 31, y, 1, -1, -90, -1, 1); 
            break;
        case left:
            //show_debug_message("drawing left");
            draw_sprite_ext(spr, sprIndex, x + 31, y, 1, -1, 90, -1, 1);
            break;
        case top:
            //show_debug_message("drawing top");
            draw_sprite_ext(spr, sprIndex, x, y - 31, 1, -1, 180, -1, 1);
            break;
        case bot:
            //show_debug_message("drawing bot");
            draw_sprite_ext(spr, sprIndex, x, y + 31, 1, -1, 0, -1, 1);
            break;
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,0</point>
    <point>32,32</point>
    <point>0,32</point>
  </PhysicsShapePoints>
</object>
